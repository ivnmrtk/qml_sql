#include "cdatabase.h"

CDataBase::CDataBase(QObject *parent) : QObject(parent)
{
    //Создаем подключение к БД
    fDB = QSqlDatabase::addDatabase("QSQLITE");
    //Устанавливаем позицию текущей записи в БД
    fPos = 0;
}

//Деструктор класса
CDataBase::~CDataBase() {
  //Закрытие подключения к БД
  fDB.close();
  //Удаление указателя на запрос
  delete fSelQuery;
}
//Метод для подсчета записей в БД
int CDataBase::Count() {
  //Формируем запрос на подсчет количества записей в БД
  QSqlQuery q("SELECT count(*) FROM phones");
  //Выполняем запрос
  q.exec();
  q.first();
  //Возвращаем результат из запроса
  return q.value(0).toInt();
}
//Метод для подсчета записей в запросе, в качестве параметра
//  передаётся ссылка на запрос
int CDataBase::Calc(QSqlQuery &Query) {
  int s = 0 ;
  //Перебираем записи запроса и считаем их количество
  while (Query.next())
    s++;
  //Возвращаем результат
  return s;
}
//Метод для проверки уникальности идентификатора, в качестве параметра
//  передается идентификатор, если такой есть в БД, тогда метод
//  возвращает true, если нет, тогда false
bool CDataBase::CheckID(int Id) {
  //Формируем запрос на выборку записей с идентификатором Id
  QSqlQuery q("SELECT * FROM phones WHERE id=?");
  //Подставляем значение идентификатора в запрос
  q.bindValue(0, Id);
  //Выполняем запрос
  q.exec();
  //Подсчитываем количество полученных запросом записей
  if (Calc(q) == 0)
    //Если 0, тогда записей с таким идентификатором нет,
    //  возвращаем true
      return true;
    else
      //  иначе, записи есть, возвращаем false
      return false;
}
//Метод, обновляющий свойства класса, в качестве параметра передается
//  позиция записи в БД
void CDataBase::Refresh(int Pos) {
  //Проверяем текущую позицию в БД
  if (Pos != -1) {
    //Если значение параметра Pos больше -1, тогда записи в БД
    //  есть, выполняем выборку, используя запрос в объекте fSelQuery
    fSelQuery->exec();
    //Перемещаем указатель на позицию Pos
    fSelQuery->seek(Pos);
    //По очереди вызываем сигналы для каждого из свойств класса,
    //  в сигнал передаем значение соответствующего поля записи,
    //  благодаря этому QML интерфейс информируется о факте
    //  изменения значения свойства
    emit recIdChanged(fSelQuery->value("id").toInt());
    emit recFIOChanged(fSelQuery->value("fio").toString());
    emit recTelChanged(fSelQuery->value("tel").toString());
    emit recAdrChanged(fSelQuery->value("adr").toString());
  } else {
    //Если значение параметра Pos равно -1, тогда в БД нет
    //  записей, вызываем сигналы для свойств со значениями,
    //  которые обозначают отсутствие данных
    emit recIdChanged(-1);
    emit recFIOChanged("");
    emit recTelChanged("");
    emit recAdrChanged("");
  }
}
//Метод для добавления новой записи в БД, в качестве параметров
//  передаются значения полей: id, fio, tel и adr, после добавления
//  текущей становится добавленная запись
void CDataBase::add(int Id, QString FIO, QString Tel, QString Adr) {
  //Проверяем идентификатор добавляемой записи на уникальность
  if (CheckID(Id) != true)
    //Если такой уже есть, тогда просто выходим из метода
    return;
  //Формируем запрос на вставку новой записи
  QSqlQuery q("INSERT INTO phones (id, fio, tel, adr) VALUES (?, ?, ?, ?)");
  //Подставляем значения параметров в запрос
  q.bindValue(0, Id);
  q.bindValue(1, FIO);
  q.bindValue(2, Tel);
  q.bindValue(3, Adr);
  //Выполняем запрос
  q.exec();
  //Переходим к последней записи
  fSelQuery->last();
  //Определяем и присваиваем позицию текущей записи
  fPos = Count() - 1;
  //Обновляем запрос, отображающий содержимое БД
  Refresh(fPos);
}
//Метод для изменения значения текущей записи, в качестве параметров
//  передаются значения полей: fio, tel и adr,
void CDataBase::set(QString FIO, QString Tel, QString Adr) {
  //Определяем идентификатор текущей записи БД
  int id = fSelQuery->value("id").toInt();
  //Формируем запрос на обновление содержимого текущей записи
  QSqlQuery q("UPDATE phones SET fio=?, tel=?, adr=? WHERE id=?");
  //Подставляем значения параметров в запрос
  q.bindValue(0, FIO);
  q.bindValue(1, Tel);
  q.bindValue(2, Adr);
  q.bindValue(3, id);
  //Выполняем запрос
  q.exec();
  //Обновляем запрос, отображающий содержимое БД
  Refresh(fPos);
}
//Метод для удаления текущей записи. После удаления текущей становится
//  следующая запись, если удалялась последняя запись тогда текущей
//  становится предыдущая запись
void CDataBase::del() {
  //Формируем запрос на удаление текущей записи
  QSqlQuery q("DELETE FROM phones WHERE id=?");
  //Определяем идентификатор текущей записи
  int id = fSelQuery->value("id").toInt();
  //Подставляем значение идентификатора в запрос
  q.bindValue(0, id);
  //Выполняем запрос
  q.exec();
  //Определяем количество записей в БД после удаления
  if (Count() == 0)
    //Если количество равно 0, то БД пустая, устанавливаем
    //  значение -1 для поля fPos
    fPos = -1;
  //Если количество записей в БД соответствует значению поля fPos,
  if (fPos == Count())
    //  тогда удаляли последнюю запись и перемещаем указатель
    //  на предпоследнюю
    fPos = Count() - 1;
    //  иначе указатель будет указывать на следующую запись
  //Обновляем запрос, отображающий содержимое БД
  Refresh(fPos);
}
//Метод для перехода на предыдущую запись, если текущая запись
//  была первой, то переходит на последнюю
void CDataBase::prev() {
  //Выполняем переход на предыдущую запись БД, если метод
  //  previous() возвращает true,
  if (fSelQuery->previous() == true) {
    //  тогда уменьшаем указатель fPos на единицу,
    fPos--;
  } else {
    //  иначе текущей была первая запись, тогда перемещаемся
    //  на последнюю запись БД
    fSelQuery->last();
    //  и устанавливаем указатель на последнюю запись
    fPos = Count() - 1;
  }
  Refresh(fPos);
}
//Метод для перехода на следующую запись, если текущая запись
//  была последней, то переходит на первую
void CDataBase::next() {
  //Выполняем переход на следующую запись БД, если метод next()
  //  возвращает true
  if (fSelQuery->next() == true) {
    //  тогда увеличиваем указатель fPos на единицу
    fPos++;
  } else {
    //  иначе текущей была последняя запись, тогда перемещаемся
    //  на первую запись БД
    fSelQuery->first();
    //  и устанавливаем указатель на первую запись
    fPos = 0;
  }
  //Обновляем запрос, отображающей содержимое БД
  Refresh(fPos);
}
//Метод-чтения, возвращающий значение свойства dataBaseName
QString CDataBase::dataBaseName() {
  return fDBName;
}
//Метод-записи, устанавливающий значение свойства dataBaseName
//  открывающий БД
void CDataBase::setDataBaseName(QString dataBaseName) {
  //Присваиваем имя БД полю fDBName
  fDBName = dataBaseName;
  //Устанавливаем имя БД
  fDB.setDatabaseName(dataBaseName);
  //Открываем БД
  if (fDB.open() == true) {
    //Если БД открылась, тогда метод open() возвращает true
    //Создаем в динамической области памяти запрос на выборку
    //  данных из БД
    fSelQuery = new  QSqlQuery("SELECT * FROM phones");
    //Определяем количество записей в БД, если количество равно 0,
    if (Count() == 0)
      // тогда устанавливаем значение -1 в поле fPos,
      fPos = -1;
    else
      // иначе 0, тем самым указываем на первую запись
      fPos = 0;
      //Обновляем запрос, отображающей содержимое БД
      Refresh(fPos);
    } else
      //  иначе выводим сообщение об ошибке в отладочное окно
      qDebug() << "БД не открыта. " << fDB.lastError().text();
    //Вызываем сигнал, связанный со свойством dataBaseName
    //  и передаем в него имя БД
    emit dataBaseNameChanged(fDBName);
}
//Метод-чтения, возвращающий значение свойства recId
int CDataBase::recId() {
  //Если количество записей в БД больше 0
  if (Count() > 0)
    //  тогда возвращаем значение поля id текущей записи
    return fSelQuery->value("id").toInt();
  else
    // иначе -1, что говорит о том, что данные отсутствуют
    return -1;
}
//Метод-чтения, возвращающий значение свойства recFIO
QString CDataBase::recFIO() {
  //Если количество записей в БД больше 0
  if (Count() > 0)
    //  тогда возвращаем значение поля fio текущей записи
    return fSelQuery->value("fio").toString();
  else
    // иначе "", что говорит о том, что данные отсутствуют
    return "";
}
//Метод-чтения, возвращающий значение свойства recTel
QString CDataBase::recTel() {
  //Если количество записей в БД больше 0
  if (Count() > 0)
    //  тогда возвращаем значение поля tel текущей записи
    return fSelQuery->value("tel").toString();
  else
    // иначе "", что говорит о том, что данные отсутствуют
    return "";
}
//Метод-чтения, возвращающий значение свойства recAdr
QString CDataBase::recAdr() {
  //Если количество записей в БД больше 0
  if (Count() > 0)
    //  тогда возвращаем значение поля adr текущей записи
    return fSelQuery->value("adr").toString();
  else
    // иначе "", что говорит о том, что данные отсутствуют
    return "";
};
